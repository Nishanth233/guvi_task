//Create the database

CREATE DATABASE ecommerce;
USE ecommerce;

//Create the customers table

CREATE TABLE customers (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(100),
    email VARCHAR(100),
    address VARCHAR(255)
);

//Create the orders table

CREATE TABLE orders (
    id INT AUTO_INCREMENT PRIMARY KEY,
    customer_id INT,
    order_date DATE,
    total_amount DECIMAL(10, 2),
    FOREIGN KEY (customer_id) REFERENCES customers(id)
);

//Create the products table

CREATE TABLE products (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(100),
    price DECIMAL(10, 2),
    description TEXT
);

//Insert Sample Data
//Insert data into customers table

INSERT INTO customers (name, email, address) VALUES
('John Doe', 'john@example.com', '123 Main St'),
('Jane Smith', 'jane@example.com', '456 Oak St'),
('Alice Johnson', 'alice@example.com', '789 Pine St');

//Insert data into orders table

INSERT INTO orders (customer_id, order_date, total_amount) VALUES
(1, '2024-10-25', 150.00),
(2, '2024-10-28', 200.00),
(1, '2024-11-05', 300.00);

//Insert data into products table

INSERT INTO products (name, price, description) VALUES
('Product A', 30.00, 'Description of Product A'),
('Product B', 40.00, 'Description of Product B'),
('Product C', 50.00, 'Description of Product C');

//Write Queries
//Retrieve all customers who have placed an order in the last 30 days.

-- Retrieve all customers who have placed an order in the last 30 days
SELECT DISTINCT c.*
FROM customers c
JOIN orders o ON c.id = o.customer_id
WHERE o.order_date >= CURDATE() - INTERVAL 30 DAY;

//Get the total amount of all orders placed by each customer.

-- Get the total amount of all orders placed by each customer
SELECT c.id, c.name, SUM(o.total_amount) AS total_spent
FROM customers c
JOIN orders o ON c.id = o.customer_id
GROUP BY c.id, c.name;

//Update the price of Product C to 45.00.

-- Update the price of Product C to 45.00
UPDATE products
SET price = 45.00
WHERE name = 'Product C';

//Add a new column discount to the products table.

-- Add a new column discount to the products table
ALTER TABLE products
ADD COLUMN discount DECIMAL(10, 2) DEFAULT 0.00;

//Retrieve the top 3 products with the highest price.

-- Retrieve the top 3 products with the highest price
SELECT *
FROM products
ORDER BY price DESC
LIMIT 3;

//Get the names of customers who have ordered Product A.

-- Get the names of customers who have ordered Product A
SELECT DISTINCT c.name
FROM customers c
JOIN orders o ON c.id = o.customer_id
JOIN order_items oi ON o.id = oi.order_id
JOIN products p ON oi.product_id = p.id
WHERE p.name = 'Product A';

//Join the orders and customers tables to retrieve the customer's name and order date for each order.

-- Join the orders and customers tables to retrieve the customer's name and order date for each order
SELECT c.name, o.order_date
FROM customers c
JOIN orders o ON c.id = o.customer_id;

//Retrieve the orders with a total amount greater than 150.00.

-- Retrieve the orders with a total amount greater than 150.00
SELECT *
FROM orders
WHERE total_amount > 150.00;

//Normalize the database by creating a separate table for order items and updating the orders table to reference the order_items table.
//Create the order_items table

CREATE TABLE order_items (
    id INT AUTO_INCREMENT PRIMARY KEY,
    order_id INT,
    product_id INT,
    quantity INT,
    FOREIGN KEY (order_id) REFERENCES orders(id),
    FOREIGN KEY (product_id) REFERENCES products(id)
);

//Update orders table to remove total_amount (optional, as we can calculate it dynamically)

ALTER TABLE orders
DROP COLUMN total_amount;

//Insert sample data into order_items table

INSERT INTO order_items (order_id, product_id, quantity) VALUES
(1, 1, 2),
(1, 2, 1),
(2, 2, 3),
(3, 1, 1),
(3, 3, 4);

//Retrieve the average total of all orders.

-- Retrieve the average total of all orders
SELECT AVG(total_amount) AS average_total
FROM orders;
